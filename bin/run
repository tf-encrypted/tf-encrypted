#!/usr/bin/env python

import os
import re
import argparse
import tensorflow as tf

from pathlib import Path
from urllib import request as urlDownloader
from typing import Callable
from tensorflow.python.platform import gfile

import numpy as np
import tf_encrypted as tfe
from tf_encrypted.protocol import Pond, SecureNN

enable_stats_monitor = os.environ.get('TFE_MONITOR_STATS') is not None
enable_traces = os.environ.get('TFE_TRACE') is not None
enable_debug = os.environ.get('TFE_DEBUG') is not None
tfe.setMonitorStatsFlag(enable_stats_monitor)
tfe.setTFETraceFlag(enable_traces)
tfe.setTFEDebugFlag(enable_debug)

parser = argparse.ArgumentParser()
parser.add_argument(
    "--protocol_name", type=str, default='securenn', help="Protocol name")
parser.add_argument(
    "--model_name", type=str, default='', help="Model name")
parser.add_argument(
    "--batch_size", type=int, default=1, help="Batch size")
parser.add_argument(
    "--model_url", type=str, default='', help="Model's public URL")
parser.add_argument(
    '--input_file', type=str, default="", help='load the data from a numpy file format (.npy)')
config = parser.parse_args()

if config.protocol_name == 'securenn':
    tfe.set_protocol(SecureNN())
else:
    tfe.set_protocol(Pond())
    
model_file = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    "..",
    "models",
    "{}.pb".format(config.model_name),
)
model_path = Path(model_file)
if not model_path.is_file() and config.model_url is not '':
    regex = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE
    )
    if re.match(regex, config.model_url) is not None:
        print('Downloading model from URL: {}'.format(config.model_url))
        model_file, _ = urlDownloader.urlretrieve(config.model_url)
    else:
        raise Exception('Invalid URL given: {}'.format(config.model_url))

tf.reset_default_graph()

input_spec = []
with gfile.FastGFile(model_file, 'rb') as f:
    print('Loading model: {}'.format(model_file))
    graph_def = tf.GraphDef()
    graph_def.ParseFromString(f.read())

    for node in graph_def.node:
        if node.op != "Placeholder":
            continue

        input_spec.append({
            'name': node.name,
            'dtype': node.attr['dtype'].type,
            'shape': [config.batch_size] + [int(d.size) for d in node.attr['shape'].shape.dim[1:]]
        })

inputs = []
for i, spec in enumerate(input_spec):
    def scope(i: int) -> Callable[[], tf.Tensor]:
        def provide_input() -> tf.Tensor:
            pl = tf.placeholder(tf.float32, shape=spec['shape'], name="api/{}".format(i))
            return pl

        return provide_input

    inputs.append(scope(i))

c = tfe.convert.convert.Converter()
y = c.convert(graph_def, tfe.convert.register(), 'input-provider', inputs)

pls = []
for i in range(len(input_spec)):
    if i == 0:
        name = "private-input/api/{}:0".format(i)
    else:
        name = "private-input_{}/api/{}:0".format(i, i)
    pls.append(
        tf.get_default_graph().get_tensor_by_name(name)
    )

if config.input_file != '':
    # TODO: Currently this allows for only one input
    # If we want to load models with multiple diffrent inputs
    # We will need to save our inputs as a list of np.array
    input_data = [np.load(config.input_file)]
    assert len(input_data) == len(input_spec), 'the input_data length ({}) should be equal the number of inputs required by the loaded model ({})'.format(len(input_data), len(input_spec))
else:
    input_data = []
    for spec in input_spec:
        input_data.append(
            np.random.standard_normal(spec['shape']).tolist()
        )

with tfe.Session() as sess:
    print("initing!!!")
    sess.run(tf.global_variables_initializer())

    print("running")
    feed_dict = {
        pl: input_data[i] for i, pl in enumerate(pls)
    }
    output = sess.run(
        y.reveal(),
        feed_dict=feed_dict,
        tag='prediction'
    )
    print(output)
