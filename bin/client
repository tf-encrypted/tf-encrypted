#!/usr/bin/env python

from typing import List, Any

import time
import argparse
import json
import requests
import numpy as np


class Client():
    def __init__(self, host: str, port: int) -> None:
        self.host = host
        self.port = port
        self.base_url = "http://%s:%d" % (self.host, self.port)

    def send_inputs(self, input_data: List[Any]) -> str:
        url = "{}/predict".format(self.base_url)
        r = requests.post(url, json=input_data)
        output_data = json.loads(r.text)

        return output_data['request_id']

    def send_random_inputs(self) -> str:
        input_spec_url = "{}/input_spec".format(self.base_url)
        r = requests.get(input_spec_url)
        input_spec = json.loads(r.text)

        input_data = []
        for spec in input_spec:
            input_data.append(
                np.random.standard_normal(spec['shape']).tolist()
            )

        url = "{}/predict".format(self.base_url)
        r = requests.post(url, json=input_data)
        output_data = json.loads(r.text)

        return output_data['request_id']

    def poll(self, request_id: str) -> str:
        print('Polling result')
        i = 0
        while i < 240:
            i += 1
            # Keep polling until we have an answer
            url = "{}/poll".format(self.base_url)
            r = requests.post(url, json=request_id)
            output_data = r.text
            if output_data is not None:
                return json.loads(output_data)
            else:
                time.sleep(1)

            return None


def main(config):
    c = Client(config.host, config.port)

    if config.request_id is not None:
        request_id = config.request_id
        if request_id is None:
            print("you need to provide a request_id")
            return

        output = c.poll(request_id)
        print(output)
    elif config.input_file != '':
        input_data = np.load(config.input_file)
        request_id = c.send_inputs(input_data.tolist())
        print(request_id)
    else:
        request_id = c.send_random_inputs()
        print(request_id)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--host", type=str, default="localhost", help="increase output verbosity")
    parser.add_argument(
        '--port', type=int, default=8080, help='port API endpoint for the prediction')
    parser.add_argument(
        '--request_id', type=str, help='id used to poll an output')
    parser.add_argument(
        '--input_file', type=str, default="", help='load the data from a numpy file format (.npy)')
    args = parser.parse_args()

    main(args)
