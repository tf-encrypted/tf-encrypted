#!/usr/bin/env python
"""Parses simple prediction time benchmarks from a TFE trace directory"""

import glob
import json
import argparse

import numpy as np

parser = argparse.ArgumentParser(description='Extract the average prediction\
                                    time with the specified trace directory')
parser.add_argument('trace_dir', type=str, help='Specify the trace directory')
args = parser.parse_args()

trace_dir = args.trace_dir
trace_path = trace_dir + "/*.ctr"


def parse_tracefile(filename):
  """Parses a trace file for event timestamps relevant to predictions.

  Args:
    filename: `str`, file with trace events.

  Returns:
    `float` of difference between earliest and latest timestamps.
  """

  with open(filename, 'r') as f:
    raw = json.load(f)

  try:
    trace_events = raw['traceEvents']
  except KeyError:
    trace_events = raw['trace_events']

  timestamps = (
      (
          event['ts'],
          event['ts'] + event['dur']
      )
      for event in trace_events
      if 'ts' in event and 'dur' in event
  )
  timestamps = sorted(timestamps, key=lambda x: x[1])

  min_ts = timestamps[0]
  max_ts = timestamps[-1]
  return max_ts[1] - min_ts[0]


durations = []

for file in glob.glob(trace_path):
  # Exclude init0.ctr and prediction0.ctr as they don't reflect the real prediction time.
  if ("init0.ctr" not in file) & ("prediction0.ctr" not in file):
    duration = parse_tracefile(file)
    durations.append(duration)

summary = """Summary statistics

Number of Predictions: {}
Average Prediction Time: {} ms
Median Prediction Time: {} ms
Standard Deviation Time: {} ms
Min Prediction Time: {} ms
Max Prediction Time: {} ms
""".format(
    len(durations),
    (float(sum(durations)) / len(durations)) / 1000,
    np.median(durations) / 1000,
    np.std(durations) / 1000,
    np.min(durations) / 1000,
    np.max(durations) / 1000
)

# Export duration for 100 predictions:
np.save('results.npy', durations)
print(summary)

with open("summary.txt", "w") as summary_file:
  summary_file.write(summary)
